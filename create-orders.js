const { GoogleSpreadsheet } = require('google-spreadsheet')
const { Telegraf } = require('telegraf')
const BigNumber = require('bignumber.js')
const axios = require('axios')
const crypto = require('crypto')

const binance_api_base_url = 'https://api.binance.com/api/v3'

const telegraf = new Telegraf('5526156566:AAH4BNRikXfK53rEpQ55y2ESw_Waqo4GR9I')
const doc = new GoogleSpreadsheet('1inkl2wirb_HY3BHn0TnIafMMGEADtzrTGtUB0ShXqdo')

const binance_key = 'aWf1oHaDe5IFlkjRam9ZMno7sqJaRg1hqz9cuY3crc3ex5nGBLmHF4em4TOIN1YX'
const binance_secret = 'emJHgCfuCG8BVaVGEgnMhPpHwjoTDXwaabKvcvs6e5C6XZbOOoHXU2SYEQ7KoBma'

const INTERVAL = 1 * 3600 * 1000
const BUY_THRESHOLD = -1  // % (compared to price in INTERVAL hour ago)
const SELL_THRESHOLD = 10 // % (compared to avgPrice)
const BUY_AMOUNT = 15 // $

async function initDoc() {
  // Initialize Auth - see https://theoephraim.github.io/node-google-spreadsheet/#/getting-started/authentication
  await doc.useServiceAccountAuth({
    // env var values are copied from service account credentials generated by google
    // see "Authentication" section in docs for more info
    client_email: 'carbon-mediator-359415@appspot.gserviceaccount.com',
    private_key: `-----BEGIN PRIVATE KEY-----\nMIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQDavHWjHTAvnMTx\nqfJMIBfdU26xjXyqir/cQp607h0HJvis8ZiRrtYW8bXq3zRrv/fMmmN0C+508BP8\nWMx/ngk4pFplgwt5MJ9IJcHY4xl3Gg8jra+EFVvZauTesO6ogWuB7fVqsbm9FA3s\nZudngq24DHZWo2nXdv0KssTaeNOBPahf+hl70l97M21Dryzkyu0piM7K9Yirctre\n/ZTTohHq8bh6YooH1kljd67+CQsmBvuDWIZVw++Y38n/WsaV1nqLFKoyXFPUVAdZ\nPbwIaVAvR+YLwVPWmc2MeC90BM3LJ4Inpu20UtEggniyHS3Od2ZTHMDjAxXU6Omj\nDObPYHqBAgMBAAECggEAJKgmssJGfAQywSkw8O8D8NR1nY3PkakVBC2p+TpaZQNz\n80+9uNRrDodNbGIhn9kZBxHsjtsdCD3fq4+aHdz3QKXSfGacup+aYfXp6ZYNg3c7\niEgoPONzdBlE58kRBe5CfRDK6ymDrhs5Rh/ssd0ljc2Q224hY7mOKIfTE6XiFCtY\nxARR9uq8OirB49Lkwo9C6P7Bcnz+3UZT+8HChnmMDDeQ6NzgSX10YYPyqFBZaTIB\nt2l7JKH+U6nU1zBzjgUd5j5m7R7jj6eKtO2gxdL1qpNxtG9pka6gKNBnCWarl9f0\nDDyyC6wEmVnkGeFPYPtE/dGgzk73L1+il0Vu6SDg0QKBgQDwpFfBIhaXirATzoww\nCH2Q/wjT9T/PdpqjgWugwy7t6XvmIIn5vm5JvHZU91N8dnF6/ufgz6834UOf6fuQ\nUZRkmZOnXo7lV/SeHA+RYUwu+1lQ0j24Sk7YpXRjxkiCjcQzawmP4kD34NmF1SIf\nE6U1y1mdNYWbApwia/yWIYWClQKBgQDosjcmC3JJAJiy7SKZ54Ng9i34Jgt316bX\nom4fCkVxfU8CeTl6WDyT06g9AC6++AqJjSckIlzn4Y/kacQfHCy8nafFABfpE8K4\npBSmhzvQ3lD8ZFpT5QxIejJM0E8pl+IQJfnrP+Ax1i0rLrcDZRmD1W+WFBnA4TLK\nLW/IluypPQKBgQCZ25m4BEGJlsTJhTAgre0KveU5D/9CeESa8e6MlP72YmgzVO6i\n3VzKjFLkNFYOp/Qafcxn8qHHCqIgJowPU/ma8I51XoHipP/j73EMtLbu+wm6IRIR\nOIF9BxyJhodp4ZZmgbNVaYW8dujdJs5wLDFfWarsVwIbf+mwIHcYzkn8mQKBgE7f\niX3lx1kjUJ7lbiMIrCmDiFViX+TBPhY9QmJXEu7C8LL/8BGeMvpQdegnVbD5VmkF\nZU0EMMWQWTus9gMtg6RzM9i8jV49inUXeMBxej7z/DNwuIVTT/SJJt+OhCavCrs6\nhBnPTujVlf3bGcGW1S0wfWA7c/dC3fpVqFwvfAxpAoGBANUL8LC7nPxpN3oUgq9x\nODsQbwgG4poW8grw5hkqpfp07phDpW+onuaiJ3kMz2QdlWqp6dHfNpDs2Xt6SB3B\nWlbIAI+I6m5W+Ei+a8dcrfpAiUDevUE7Qfn8tZYXOcO40O+M7ll8/940MTCAzCHM\n3pSvtb8Ecn8ucS70y1CW2MAS\n-----END PRIVATE KEY-----\n`,
  })

  await doc.loadInfo()
}

async function getAvgPrice(sheetName) {
  const sheet = doc.sheetsByTitle[sheetName]
  await sheet.loadCells('A1:J999999')

  let nextEmptyRow = 4
  let avgPrice = new BigNumber(0)
  while (true) {
    const cell = sheet.getCell(nextEmptyRow, 9)
    if (cell.value === null) {
      break
    } else {
      avgPrice = new BigNumber(cell.value)
      nextEmptyRow++
    }
  }
  return avgPrice
}

async function buy(pairName) {
  const params = `symbol=${pairName}&side=BUY&type=MARKET&quoteOrderQty=${BUY_AMOUNT}&timestamp=${Date.now()}`
  const signature = crypto.createHmac('sha256', binance_secret).update(params).digest('hex')
  await axios({
    method: 'POST', url: `${binance_api_base_url}/order?${params}&signature=${signature}`, headers: {
      'X-MBX-APIKEY': binance_key,
    },
  })
}

async function getBalance(tokenSymbol) {
  const params = `timestamp=${Date.now()}`
  const signature = crypto.createHmac('sha256', binance_secret).update(params).digest('hex')
  const response = await axios({
    method: 'GET', url: `${binance_api_base_url}/account?${params}&signature=${signature}`, headers: {
      'X-MBX-APIKEY': binance_key,
    },
  })
  if (response.status === 200) {
    return new BigNumber(response?.data?.balances?.find((item) => item.asset === tokenSymbol)?.free ?? 0)
  }
  return new BigNumber(0)
}

async function sell(pairName, currPrice) {
  const balance = await getBalance(pairName.split('USDT')[0])
  if (!balance.eq(0)) {
    const sellAmount = balance.times(currPrice).integerValue(BigNumber.ROUND_DOWN)
    const params = `symbol=${pairName}&side=SELL&type=MARKET&quoteOrderQty=${sellAmount}&timestamp=${Date.now()}`
    const signature = crypto.createHmac('sha256', binance_secret).update(params).digest('hex')
    await axios({
      method: 'POST', url: `${binance_api_base_url}/order?${params}&signature=${signature}`, headers: {
        'X-MBX-APIKEY': binance_key,
      },
    })
    return sellAmount
  }
  return undefined
}

async function makeOrder(pairName) {
  try {
    const avgPrice = await getAvgPrice(pairName)
    if (!avgPrice.eq('0')) {
      let r

      const startTime = Date.now() - INTERVAL
      r = await axios.get(`${binance_api_base_url}/klines`, {
        params: {
          symbol: pairName, interval: '1m', startTime, limit: 1,
        },
      })
      if (r.status === 200) {
        const prevPrice = new BigNumber(r.data[0][1] ?? '0')
        if (!prevPrice.eq('0')) {
          r = await axios.get(`${binance_api_base_url}/ticker/price?symbol=${pairName}`)
          if (r.status === 200) {
            const currPrice = new BigNumber(r.data.price ?? '0')
            if (!currPrice.eq('0')) {
              console.log()
              console.log(`[${pairName}] prev`, prevPrice.toFixed())
              console.log(`[${pairName}] curr`, currPrice.toFixed())
              console.log(`[${pairName}] avg`, avgPrice.toFixed())
              const options = {
                minimumFractionDigits: 0, maximumFractionDigits: 4,
              }
              const str = {
                avg: `[${pairName}] avg  = ${avgPrice.toNumber().toLocaleString(undefined, options)}`,
                prev: `[${pairName}] prev = ${prevPrice.toNumber().toLocaleString(undefined, options)}`,
                curr: `[${pairName}] curr = ${currPrice.toNumber().toLocaleString(undefined, options)}`,
              }
              await telegraf.telegram.sendMessage('826078577', `${str.avg}\n${str.prev}\n${str.curr}\n`)

              // SELL
              const d1 = currPrice.minus(avgPrice).div(currPrice).times(100)
              console.log(`[${pairName}] currPrice compared to avgPrice ${d1.toNumber().toFixed(2)}%`)
              if (d1.gte(SELL_THRESHOLD)) {
                console.log('==> SELL')
                const sellAmount = await sell(pairName, currPrice)
                if (sellAmount) {
                  await telegraf.telegram.sendMessage('826078577', `*[${pairName}] SELL $${sellAmount} because d1 = ${d1.toNumber().toFixed(2)}% >= ${SELL_THRESHOLD}%*`, {
                    parse_mode: 'Markdown',
                  })
                }
                console.log('==> DONE')
              } else {
                await telegraf.telegram.sendMessage('826078577', `[${pairName}] NOT SELL because d1 = ${d1.toNumber().toFixed(2)}% < ${SELL_THRESHOLD}%`)
                console.log('==> NOT SELL')
              }

              // BUY
              // const d2 = currPrice.minus(prevPrice).div(currPrice).times(100)
              // console.log(`[${pairName}] currPrice compared to prevPrice ${d2.toNumber().toFixed(2)}%`)
              if (d1.lte(BUY_THRESHOLD)) {
                console.log('==> BUY')
                await buy(pairName)
                await telegraf.telegram.sendMessage('826078577', `*[${pairName}] BUY $${BUY_AMOUNT} because d1 = ${d1.toNumber().toFixed(2)}% <= ${BUY_THRESHOLD}%*`, {
                  parse_mode: 'Markdown',
                })
                console.log('==> DONE')
              } else {
                await telegraf.telegram.sendMessage('826078577', `[${pairName}] NOT BUY because d1 = ${d1.toNumber().toFixed(2)}% > ${BUY_THRESHOLD}%`)
                console.log('==> NOT BUY')
              }
              console.log()
            }
          }
        }
      }
    }
  } catch (error) {
    console.error(error)
  }
}

const pairNames = ['NEARUSDT', 'KNCUSDT', 'GMTUSDT']

async function main() {
  const start = Date.now()
  await telegraf.telegram.sendMessage('826078577', '------------------------------------------------------------------------')
  await telegraf.telegram.sendMessage('826078577', new Date().toUTCString())
  await initDoc()
  for (const pair of pairNames) {
    await telegraf.telegram.sendMessage('826078577', '--------------------')
    await makeOrder(pair)
  }
  console.log('DONE in ' + (Date.now() - start) + 'ms')
}

main()
