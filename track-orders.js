const { Spot } = require('@binance/connector')
const { GoogleSpreadsheet } = require('google-spreadsheet')
const { Telegraf } = require('telegraf')
const BigNumber = require('bignumber.js')

const telegraf = new Telegraf('5383104199:AAHjcYiK8FZHPpVAyCMsFFxd3nZOwN4FZsU')
const doc = new GoogleSpreadsheet('1inkl2wirb_HY3BHn0TnIafMMGEADtzrTGtUB0ShXqdo')

const binance_key = '362okh3iJ4FE2ATjvLqgCKsiBy7BSu2mIrHkhh4FfY6tSgw5jPXxODLrKeTA4IkE'
const binance_secret = 'C9erSdOpRoZIFcXB3JZGsGWry2cO5rLmOzghPSjKdcUsOkq77Xu5LdW9ytwF7JWH'
const binanceSpotClient = new Spot(binance_key, binance_secret)

const COLUMN_CONFIG = ['ID', 'Time', 'Side', 'Quantity', 'Price', 'Remaining Token', 'Average Price', 'Note']

async function saveOrdersToGoogleSheets(sheetName, data) {
  // Initialize Auth - see https://theoephraim.github.io/node-google-spreadsheet/#/getting-started/authentication
  await doc.useServiceAccountAuth({
    // env var values are copied from service account credentials generated by google
    // see "Authentication" section in docs for more info
    client_email: 'carbon-mediator-359415@appspot.gserviceaccount.com',
    private_key: `-----BEGIN PRIVATE KEY-----\nMIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQDavHWjHTAvnMTx\nqfJMIBfdU26xjXyqir/cQp607h0HJvis8ZiRrtYW8bXq3zRrv/fMmmN0C+508BP8\nWMx/ngk4pFplgwt5MJ9IJcHY4xl3Gg8jra+EFVvZauTesO6ogWuB7fVqsbm9FA3s\nZudngq24DHZWo2nXdv0KssTaeNOBPahf+hl70l97M21Dryzkyu0piM7K9Yirctre\n/ZTTohHq8bh6YooH1kljd67+CQsmBvuDWIZVw++Y38n/WsaV1nqLFKoyXFPUVAdZ\nPbwIaVAvR+YLwVPWmc2MeC90BM3LJ4Inpu20UtEggniyHS3Od2ZTHMDjAxXU6Omj\nDObPYHqBAgMBAAECggEAJKgmssJGfAQywSkw8O8D8NR1nY3PkakVBC2p+TpaZQNz\n80+9uNRrDodNbGIhn9kZBxHsjtsdCD3fq4+aHdz3QKXSfGacup+aYfXp6ZYNg3c7\niEgoPONzdBlE58kRBe5CfRDK6ymDrhs5Rh/ssd0ljc2Q224hY7mOKIfTE6XiFCtY\nxARR9uq8OirB49Lkwo9C6P7Bcnz+3UZT+8HChnmMDDeQ6NzgSX10YYPyqFBZaTIB\nt2l7JKH+U6nU1zBzjgUd5j5m7R7jj6eKtO2gxdL1qpNxtG9pka6gKNBnCWarl9f0\nDDyyC6wEmVnkGeFPYPtE/dGgzk73L1+il0Vu6SDg0QKBgQDwpFfBIhaXirATzoww\nCH2Q/wjT9T/PdpqjgWugwy7t6XvmIIn5vm5JvHZU91N8dnF6/ufgz6834UOf6fuQ\nUZRkmZOnXo7lV/SeHA+RYUwu+1lQ0j24Sk7YpXRjxkiCjcQzawmP4kD34NmF1SIf\nE6U1y1mdNYWbApwia/yWIYWClQKBgQDosjcmC3JJAJiy7SKZ54Ng9i34Jgt316bX\nom4fCkVxfU8CeTl6WDyT06g9AC6++AqJjSckIlzn4Y/kacQfHCy8nafFABfpE8K4\npBSmhzvQ3lD8ZFpT5QxIejJM0E8pl+IQJfnrP+Ax1i0rLrcDZRmD1W+WFBnA4TLK\nLW/IluypPQKBgQCZ25m4BEGJlsTJhTAgre0KveU5D/9CeESa8e6MlP72YmgzVO6i\n3VzKjFLkNFYOp/Qafcxn8qHHCqIgJowPU/ma8I51XoHipP/j73EMtLbu+wm6IRIR\nOIF9BxyJhodp4ZZmgbNVaYW8dujdJs5wLDFfWarsVwIbf+mwIHcYzkn8mQKBgE7f\niX3lx1kjUJ7lbiMIrCmDiFViX+TBPhY9QmJXEu7C8LL/8BGeMvpQdegnVbD5VmkF\nZU0EMMWQWTus9gMtg6RzM9i8jV49inUXeMBxej7z/DNwuIVTT/SJJt+OhCavCrs6\nhBnPTujVlf3bGcGW1S0wfWA7c/dC3fpVqFwvfAxpAoGBANUL8LC7nPxpN3oUgq9x\nODsQbwgG4poW8grw5hkqpfp07phDpW+onuaiJ3kMz2QdlWqp6dHfNpDs2Xt6SB3B\nWlbIAI+I6m5W+Ei+a8dcrfpAiUDevUE7Qfn8tZYXOcO40O+M7ll8/940MTCAzCHM\n3pSvtb8Ecn8ucS70y1CW2MAS\n-----END PRIVATE KEY-----\n`,
  })

  await doc.loadInfo()
  const sheet = doc.sheetsByTitle[sheetName]
  await sheet.loadCells('A1:J999999')

  let nextEmptyRow = 3
  const existedOrderIds = []
  while (true) {
    const cell = sheet.getCell(nextEmptyRow, 0)
    if (cell.value === null) {
      break
    } else {
      existedOrderIds.push(cell.value)
      nextEmptyRow++
    }
  }
  data
    .filter((item) => {
      return !existedOrderIds.includes(item.orderId)
    })
    .forEach((item) => {
      telegraf.telegram.sendMessage(
        '826078577',
        `${item.side} ${new BigNumber(item.executedQty).toFixed()} ${sheetName} with price ${new BigNumber(
          item.price,
        ).toFixed()}.`,
      )

      // Google sheets.
      sheet.getCell(nextEmptyRow, COLUMN_CONFIG.indexOf('ID')).value = item.orderId
      sheet.getCell(nextEmptyRow, COLUMN_CONFIG.indexOf('Time')).value = item.time
      sheet.getCell(nextEmptyRow, COLUMN_CONFIG.indexOf('Side')).value = item.side
      sheet.getCell(nextEmptyRow, COLUMN_CONFIG.indexOf('Quantity')).value = item.executedQty
      sheet.getCell(nextEmptyRow, COLUMN_CONFIG.indexOf('Price')).value = item.price
      nextEmptyRow++
    })

  await sheet.saveUpdatedCells()
  console.log(`Saved ${sheetName} to google sheets.`)
}

async function getLimitOrders(token, pairName) {
  try {
    const response = await binanceSpotClient.allOrders(pairName, {
      startTime: 1670630400000, // December 10, 2022 0:00:00
    })
    const filledOrders = response.data
      .filter((order) => order.status === 'FILLED')
      .map((order) => {
        return {
          orderId: order.orderId,
          time: order.time,
          side: order.side,
          price: order.price,
          executedQty: order.executedQty,
        }
      })
    await saveOrdersToGoogleSheets(token, filledOrders)
  } catch (error) {
    console.error(error)
  }
}

async function getLimitOrdersOfToken(token) {
  await getLimitOrders(token, token + 'USDT')
  await getLimitOrders(token, token + 'BUSD')
}

const tokens = ['BTC', 'ETH', 'SOL', 'NEAR', 'KNC']

async function main() {
  const start = Date.now()
  const promises = tokens.map((token) => getLimitOrdersOfToken(token))
  await Promise.all(promises)
  console.log('DONE in ' + (Date.now() - start) + 'ms')
}

main()
setInterval(main, 60000)
